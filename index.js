const { useState, useRef, useEffect } = React;

// Componente principal
const App = () => {
  const [layers, setLayers] = useState([{ id: Date.now(), elements: [], visible: true }]);
  const [currentLayer, setCurrentLayer] = useState(layers[0].id);
  const [history, setHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  const [tool, setTool] = useState('select');
  const [color, setColor] = useState('#ffffff');
  const [opacity, setOpacity] = useState(1);
  const [brushSize, setBrushSize] = useState(5);
  const canvasRef = useRef(null);
  const isDrawing = useRef(false);

  // Adicionar ação ao histórico
  const addToHistory = (newLayers) => {
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(JSON.stringify(newLayers));
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  // Desfazer
  const undo = () => {
    if (historyIndex > 0) {
      setHistoryIndex(historyIndex - 1);
      setLayers(JSON.parse(history[historyIndex - 1]));
    }
  };

  // Refazer
  const redo = () => {
    if (historyIndex < history.length - 1) {
      setHistoryIndex(historyIndex + 1);
      setLayers(JSON.parse(history[historyIndex + 1]));
    }
  };

  // Adicionar elemento
  const addElement = (type, props = {}) => {
    const newElement = {
      id: Date.now(),
      type,
      x: 50,
      y: 50,
      width: type === 'text' ? 150 : 100,
      height: type === 'text' ? 40 : 50,
      content: type === 'text' ? 'Sample Text' : '',
      color: color,
      opacity: opacity,
      fontSize: type === 'text' ? 16 : null,
      rotation: 0,
      ...props,
    };
    const updatedLayers = layers.map(layer =>
      layer.id === currentLayer
        ? { ...layer, elements: [...layer.elements, newElement] }
        : layer
    );
    setLayers(updatedLayers);
    addToHistory(updatedLayers);
  };

  // Atualizar elemento
  const updateElement = (layerId, elementId, updates) => {
    const updatedLayers = layers.map(layer =>
      layer.id === layerId
        ? {
            ...layer,
            elements: layer.elements.map(el =>
              el.id === elementId ? { ...el, ...updates } : el
            ),
          }
        : layer
    );
    setLayers(updatedLayers);
    addToHistory(updatedLayers);
  };

  // Adicionar nova camada
  const addLayer = () => {
    const newLayer = { id: Date.now(), elements: [], visible: true };
    const updatedLayers = [...layers, newLayer];
    setLayers(updatedLayers);
    setCurrentLayer(newLayer.id);
    addToHistory(updatedLayers);
  };

  // Alternar visibilidade da camada
  const toggleLayerVisibility = (layerId) => {
    const updatedLayers = layers.map(layer =>
      layer.id === layerId ? { ...layer, visible: !layer.visible } : layer
    );
    setLayers(updatedLayers);
    addToHistory(updatedLayers);
  };

  // Exportar para Lua
  const exportToLua = () => {
    let luaCode = "-- MTA SA HUD Generated by HUD Builder\n";
    luaCode += "addEventHandler('onClientRender', root, function()\n";

    layers.forEach(layer => {
      if (!layer.visible) return;
      layer.elements.forEach(el => {
        const [r, g, b] = hexToRgb(el.color);
        const alpha = Math.round(el.opacity * 255);
        if (el.type === 'text') {
          luaCode += `  dxDrawText("${el.content}", ${el.x}, ${el.y}, ${el.x + el.width}, ${el.y + el.height}, tocolor(${r}, ${g}, ${b}, ${alpha}), ${el.fontSize / 16}, "default", "left", "top", false, false, false, true)\n`;
        } else if (el.type === 'rectangle' || el.type === 'bar') {
          luaCode += `  dxDrawRectangle(${el.x}, ${el.y}, ${el.width}, ${el.height}, tocolor(${r}, ${g}, ${b}, ${alpha}))\n`;
        } else if (el.type === 'image') {
          luaCode += `  dxDrawImage(${el.x}, ${el.y}, ${el.width}, ${el.height}, "${el.content}", ${el.rotation}, 0, 0, tocolor(255, 255, 255, ${alpha}))\n`;
        } else if (el.type === 'line') {
          luaCode += `  dxDrawLine(${el.x}, ${el.y}, ${el.x + el.width}, ${el.y + el.height}, tocolor(${r}, ${g}, ${b}, ${alpha}), ${el.thickness || 1})\n`;
        }
      });
    });

    luaCode += "end)\n\n";
    luaCode += "function hexToRgb(hex)\n";
    luaCode += "  hex = hex:gsub('#','')\n";
    luaCode += "  return tonumber('0x'..hex:sub(1,2)), tonumber('0x'..hex:sub(3,4)), tonumber('0x'..hex:sub(5,6))\n";
    luaCode += "end";

    const blob = new Blob([luaCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'hud.lua';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Converter hex para RGB
  const hexToRgb = (hex) => {
    hex = hex.replace('#', '');
    return [
      parseInt(hex.substring(0, 2), 16),
      parseInt(hex.substring(2, 4), 16),
      parseInt(hex.substring(4, 6), 16),
    ];
  };

  return (
    <div className="flex flex-col h-screen">
      {/* Barra de ferramentas superior */}
      <div className="bg-gray-800 p-2 flex items-center space-x-2">
        <button
          onClick={() => setTool('select')}
          className={`p-2 rounded ${tool === 'select' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Select"
        >
          Select
        </button>
        <button
          onClick={() => setTool('pencil')}
          className={`p-2 rounded ${tool === 'pencil' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Pencil"
        >
          Pencil
        </button>
        <button
          onClick={() => setTool('rectangle')}
          className={`p-2 rounded ${tool === 'rectangle' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Rectangle"
        >
          Rectangle
        </button>
        <button
          onClick={() => setTool('line')}
          className={`p-2 rounded ${tool === 'line' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Line"
        >
          Line
        </button>
        <button
          onClick={() => setTool('text')}
          className={`p-2 rounded ${tool === 'text' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Text"
        >
          Text
        </button>
        <button
          onClick={() => setTool('eraser')}
          className={`p-2 rounded ${tool === 'eraser' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Eraser"
        >
          Eraser
        </button>
        <button
          onClick={() => setTool('fill')}
          className={`p-2 rounded ${tool === 'fill' ? 'bg-blue-600' : 'bg-gray-700'}`}
          title="Fill"
        >
          Fill
        </button>
        <input
          type="color"
          value={color}
          onChange={(e) => setColor(e.target.value)}
          className="h-8 w-8"
          title="Color"
        />
        <input
          type="range"
          min="0"
          max="1"
          step="0.1"
          value={opacity}
          onChange={(e) => setOpacity(parseFloat(e.target.value))}
          className="w-20"
          title="Opacity"
        />
        <input
          type="range"
          min="1"
          max="50"
          value={brushSize}
          onChange={(e) => setBrushSize(parseInt(e.target.value))}
          className="w-20"
          title="Brush Size"
        />
        <button onClick={undo} className="p-2 bg-gray-700 rounded" title="Undo">
          Undo
        </button>
        <button onClick={redo} className="p-2 bg-gray-700 rounded" title="Redo">
          Redo
        </button>
        <button
          onClick={exportToLua}
          className="p-2 bg-green-600 rounded"
          title="Export to Lua"
        >
          Export Lua
        </button>
      </div>

      {/* Área principal */}
      <div className="flex flex-1">
        {/* Barra lateral esquerda (Ferramentas adicionais) */}
        <div className="w-64 bg-gray-800 p-4">
          <h2 className="text-xl font-bold mb-4">Tools</h2>
          <button
            onClick={() => addElement('bar')}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 mb-2 rounded"
          >
            Add Bar
          </button>
          <button
            onClick={() => addElement('image')}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 mb-2 rounded"
          >
            Add Image
          </button>
          <button
            onClick={addLayer}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 mb-2 rounded"
          >
            Add Layer
          </button>
        </div>

        {/* Canvas */}
        <div className="flex-1 p-4">
          <div
            ref={canvasRef}
            className="relative w-full h-full bg-gray-700 rounded-lg overflow-auto"
            style={{ minHeight: '600px' }}
            onMouseDown={(e) => handleMouseDown(e, tool, canvasRef, layers, currentLayer, addElement, updateElement)}
            onMouseMove={(e) => handleMouseMove(e, tool, canvasRef, isDrawing, layers, currentLayer, updateElement)}
            onMouseUp={() => handleMouseUp(isDrawing)}
          >
            {layers.map(layer => (
              <div key={layer.id} style={{ display: layer.visible ? 'block' : 'none' }}>
                {layer.elements.map(el => (
                  <DraggableElement
                    key={el.id}
                    element={el}
                    layerId={layer.id}
                    updateElement={updateElement}
                    tool={tool}
                  />
                ))}
              </div>
            ))}
          </div>
        </div>

        {/* Barra lateral direita (Propriedades e Camadas) */}
        <div className="w-64 bg-gray-800 p-4">
          <h2 className="text-xl font-bold mb-4">Properties</h2>
          {layers
            .find(layer => layer.id === currentLayer)
            ?.elements.slice(-1)
            .map(el => (
              <ElementProperties
                key={el.id}
                element={el}
                updateElement={(updates) => updateElement(currentLayer, el.id, updates)}
              />
            ))}
          <h2 className="text-xl font-bold mt-6 mb-4">Layers</h2>
          {layers.map(layer => (
            <div key={layer.id} className="flex items-center mb-2">
              <input
                type="checkbox"
                checked={layer.visible}
                onChange={() => toggleLayerVisibility(layer.id)}
                className="mr-2"
              />
              <button
                onClick={() => setCurrentLayer(layer.id)}
                className={`flex-1 p-2 rounded ${currentLayer === layer.id ? 'bg-blue-600' : 'bg-gray-700'}`}
              >
                Layer {layer.id}
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Manipulação de eventos do mouse
const handleMouseDown = (e, tool, canvasRef, layers, currentLayer, addElement, updateElement) => {
  const canvas = canvasRef.current.getBoundingClientRect();
  const x = e.clientX - canvas.left;
  const y = e.clientY - canvas.top;

  if (tool === 'pencil' || tool === 'eraser') {
    isDrawing.current = true;
    addElement('line', { x, y, width: 0, height: 0, thickness: brushSize, color: tool === 'eraser' ? '#000000' : color });
  } else if (tool === 'rectangle') {
    addElement('rectangle', { x, y, width: 0, height: 0 });
  } else if (tool === 'line') {
    addElement('line', { x, y, width: 0, height: 0, thickness: brushSize });
  } else if (tool === 'text') {
    addElement('text', { x, y });
  }
};

const handleMouseMove = (e, tool, canvasRef, isDrawing, layers, currentLayer, updateElement) => {
  if (!isDrawing.current) return;

  const canvas = canvasRef.current.getBoundingClientRect();
  const x = e.clientX - canvas.left;
  const y = e.clientY - canvas.top;

  const currentLayerData = layers.find(layer => layer.id === currentLayer);
  const lastElement = currentLayerData.elements[currentLayerData.elements.length - 1];

  if (tool === 'pencil' || tool === 'eraser') {
    updateElement(currentLayer, lastElement.id, { width: x - lastElement.x, height: y - lastElement.y });
  } else if (tool === 'rectangle' || tool === 'line') {
    updateElement(currentLayer, lastElement.id, { width: x - lastElement.x, height: y - lastElement.y });
  }
};

const handleMouseUp = (isDrawing) => {
  isDrawing.current = false;
};

// Componente para elementos arrastáveis
const DraggableElement = ({ element, layerId, updateElement, tool }) => {
  const handleDrag = (e) => {
    if (tool !== 'select') return;
    const canvas = e.target.parentElement.getBoundingClientRect();
    const x = e.clientX - canvas.left - element.width / 2;
    const y = e.clientY - canvas.top - element.height / 2;
    updateElement(element.id, { x, y });
  };

  return (
    <div
      draggable={tool === 'select'}
      onDrag={handleDrag}
      className="absolute cursor-move"
      style={{
        left: element.x,
        top: element.y,
        width: element.width,
        height: element.height,
        background: element.type === 'rectangle' || element.type === 'bar' ? element.color : 'transparent',
        color: element.type === 'text' ? element.color : 'inherit',
        fontSize: element.type === 'text' ? `${element.fontSize}px` : 'inherit',
        border: element.type === 'image' ? '1px solid white' : 'none',
        opacity: element.opacity,
        transform: `rotate(${element.rotation}deg)`,
      }}
    >
      {element.type === 'text' && element.content}
      {element.type === 'image' && (
        <div className="w-full h-full bg-gray-500 flex items-center justify-center">
          {element.content || 'Image Placeholder'}
        </div>
      )}
      {element.type === 'line' && (
        <svg className="absolute w-full h-full">
          <line
            x1="0"
            y1="0"
            x2={element.width}
            y2={element.height}
            stroke={element.color}
            strokeWidth={element.thickness}
            strokeOpacity={element.opacity}
          />
        </svg>
      )}
    </div>
  );
};

// Componente para propriedades do elemento
const ElementProperties = ({ element, updateElement }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    updateElement({ [name]: name === 'rotation' || name === 'fontSize' ? parseFloat(value) : value });
  };

  return (
    <div>
      <div className="mb-4">
        <label className="block text-sm">X Position</label>
        <input
          type="number"
          name="x"
          value={element.x}
          onChange={handleChange}
          className="w-full bg-gray-700 text-white p-2 rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm">Y Position</label>
        <input
          type="number"
          name="y"
          value={element.y}
          onChange={handleChange}
          className="w-full bg-gray-700 text-white p-2 rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm">Width</label>
        <input
          type="number"
          name="width"
          value={element.width}
          onChange={handleChange}
          className="w-full bg-gray-700 text-white p-2 rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm">Height</label>
        <input
          type="number"
          name="height"
          value={element.height}
          onChange={handleChange}
          className="w-full bg-gray-700 text-white p-2 rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm">Rotation (°)</label>
        <input
          type="number"
          name="rotation"
          value={element.rotation}
          onChange={handleChange}
          className="w-full bg-gray-700 text-white p-2 rounded"
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm">Opacity</label>
        <input
          type="range"
          name="opacity"
          min="0"
          max="1"
          step="0.1"
          value={element.opacity}
          onChange={handleChange}
          className="w-full"
        />
      </div>
      {(element.type === 'text' || element.type === 'rectangle' || element.type === 'bar' || element.type === 'line') && (
        <div className="mb-4">
          <label className="block text-sm">Color</label>
          <input
            type="color"
            name="color"
            value={element.color}
            onChange={handleChange}
            className="w-full h-10 bg-gray-700 rounded"
          />
        </div>
      )}
      {element.type === 'text' && (
        <>
          <div className="mb-4">
            <label className="block text-sm">Text</label>
            <input
              type="text"
              name="content"
              value={element.content}
              onChange={handleChange}
              className="w-full bg-gray-700 text-white p-2 rounded"
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm">Font Size</label>
            <input
              type="number"
              name="fontSize"
              value={element.fontSize}
              onChange={handleChange}
              className="w-full bg-gray-700 text-white p-2 rounded"
            />
          </div>
        </>
      )}
      {element.type === 'image' && (
        <div className="mb-4">
          <label className="block text-sm">Image Path</label>
          <input
            type="text"
            name="content"
            value={element.content}
            onChange={handleChange}
            placeholder="e.g., images/hud.png"
            className="w-full bg-gray-700 text-white p-2 rounded"
          />
        </div>
      )}
      {element.type === 'line' && (
        <div className="mb-4">
          <label className="block text-sm">Thickness</label>
          <input
            type="number"
            name="thickness"
            value={element.thickness || 1}
            onChange={handleChange}
            className="w-full bg-gray-700 text-white p-2 rounded"
          />
        </div>
      )}
    </div>
  );
};

// Renderizar aplicação
ReactDOM.render(<App />, document.getElementById('root'));
